#!/bin/bash

# Complete Appwrite Setup Automation
# This script sets up everything from scratch

set -e  # Exit on any error

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
APPWRITE_PROJECT_ID="intrada-dev"
APPWRITE_DATABASE_ID="intrada_db"
APPWRITE_DATABASE_NAME="Intrada Database"
APPWRITE_ENDPOINT="http://localhost/v1"

# API key can be passed as environment variable or argument
if [ ! -z "$1" ]; then
    APPWRITE_API_KEY="$1"
elif [ ! -z "$APPWRITE_API_KEY" ]; then
    # Use existing environment variable
    APPWRITE_API_KEY="$APPWRITE_API_KEY"
else
    APPWRITE_API_KEY=""
fi

echo -e "${BLUE}üöÄ Complete Appwrite Setup Automation${NC}"
echo -e "${BLUE}======================================${NC}"

# Function to wait for service
wait_for_service() {
    local max_attempts=60
    local attempt=1
    
    echo -e "${YELLOW}‚è≥ Waiting for Appwrite to be ready...${NC}"
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s "$APPWRITE_ENDPOINT/health" >/dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ Appwrite is ready!${NC}"
            return 0
        fi
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo -e "${RED}‚ùå Appwrite failed to start${NC}"
    return 1
}

# Function to test API key
test_api_key() {
    local api_key=$1
    if [ -z "$api_key" ]; then
        return 1
    fi
    
    local response=$(curl -s -w "%{http_code}" -o /dev/null \
        -H "X-Appwrite-Project: $APPWRITE_PROJECT_ID" \
        -H "X-Appwrite-Key: $api_key" \
        "$APPWRITE_ENDPOINT/databases" 2>/dev/null)
    
    if [ "$response" = "200" ]; then
        return 0
    else
        return 1
    fi
}

# Function to configure CLI
configure_cli() {
    local api_key=$1
    echo -e "${YELLOW}üîß Configuring Appwrite CLI...${NC}"
    appwrite client \
        --endpoint "$APPWRITE_ENDPOINT" \
        --projectId "$APPWRITE_PROJECT_ID" \
        --key "$api_key" \
        --selfSigned true >/dev/null 2>&1 || true
}

# Function to deploy schema
deploy_schema() {
    echo -e "${YELLOW}üèóÔ∏è Building CLI tool...${NC}"
    cd infrastructure
    cargo build --bin appwrite_cli --features cli >/dev/null 2>&1
    
    echo -e "${YELLOW}üöÄ Deploying database schema...${NC}"
    ../target/debug/appwrite_cli deploy \
        --database-id "$APPWRITE_DATABASE_ID" \
        --database-name "$APPWRITE_DATABASE_NAME" \
        --environment dev
    
    cd ..
}

# Function to create environment file
create_env_file() {
    local api_key=$1
    echo -e "${YELLOW}üìù Creating environment configuration...${NC}"
    
    cat > .env.local << EOF
# Local Appwrite Configuration
# Generated by setup-appwrite-complete.sh

APPWRITE_ENDPOINT=$APPWRITE_ENDPOINT
APPWRITE_PROJECT_ID=$APPWRITE_PROJECT_ID
APPWRITE_DATABASE_ID=$APPWRITE_DATABASE_ID
APPWRITE_API_KEY=$api_key

# iOS Config values
APPWRITE_COLLECTION_ID=goals

# Development flags
NODE_ENV=development
RUST_LOG=debug
EOF
}

# Function to verify setup
verify_setup() {
    echo -e "${YELLOW}üîç Verifying setup...${NC}"
    source .env.local
    
    # Check database
    local db_response=$(curl -s -H "X-Appwrite-Project: $APPWRITE_PROJECT_ID" \
        -H "X-Appwrite-Key: $APPWRITE_API_KEY" \
        "$APPWRITE_ENDPOINT/databases/$APPWRITE_DATABASE_ID" 2>/dev/null)
    
    if echo "$db_response" | grep -q "Intrada Database"; then
        echo -e "${GREEN}‚úÖ Database verified${NC}"
    else
        echo -e "${RED}‚ùå Database verification failed${NC}"
        return 1
    fi
    
    # Wait a moment for collections to be available
    echo -e "${YELLOW}‚è≥ Waiting for collections to be available...${NC}"
    sleep 5
    
    # Check collections with retries
    local collection_count=0
    local attempts=0
    local max_attempts=10
    
    while [ $attempts -lt $max_attempts ] && [ $collection_count -lt 4 ]; do
        local collections_response=$(curl -s -H "X-Appwrite-Project: $APPWRITE_PROJECT_ID" \
            -H "X-Appwrite-Key: $APPWRITE_API_KEY" \
            "$APPWRITE_ENDPOINT/databases/$APPWRITE_DATABASE_ID/collections" 2>/dev/null)
        
        collection_count=$(echo "$collections_response" | python3 -c "import json, sys; print(json.load(sys.stdin).get('total', 0))" 2>/dev/null || echo "0")
        
        if [ "$collection_count" -ge "4" ]; then
            echo -e "${GREEN}‚úÖ Collections verified ($collection_count found)${NC}"
            return 0
        fi
        
        echo -n "."
        sleep 2
        attempts=$((attempts + 1))
    done
    
    if [ "$collection_count" -ge "4" ]; then
        echo -e "${GREEN}‚úÖ Collections verified ($collection_count found)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Collections verification inconclusive ($collection_count found, expected 4)${NC}"
        echo -e "${BLUE}‚ÑπÔ∏è This may be normal - collections might need more time to appear in API${NC}"
        # Don't fail the setup for this - the deployment showed success
        return 0
    fi
}

# Main execution starts here
echo -e "${YELLOW}üìã Step 1: Starting Appwrite services...${NC}"

# Start Docker services
if ! docker info >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker is not running${NC}"
    exit 1
fi

docker compose up -d
wait_for_service

echo -e "${YELLOW}üìã Step 2: Checking for existing setup...${NC}"

# Check if we have a working API key
if [ -f ".env.local" ]; then
    source .env.local
    if test_api_key "$APPWRITE_API_KEY"; then
        echo -e "${GREEN}‚úÖ Found working configuration${NC}"
        APPWRITE_API_KEY="$APPWRITE_API_KEY"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Existing configuration not working${NC}"
        APPWRITE_API_KEY=""
    fi
fi

# If no working API key, prompt for it
if [ -z "$APPWRITE_API_KEY" ]; then
    echo -e "${YELLOW}üìã Step 3: API Key Setup Required${NC}"
    echo ""
    echo -e "${BLUE}Please complete these steps:${NC}"
    echo -e "  1. Open: ${YELLOW}http://localhost/console${NC}"
    echo -e "  2. Create account / login"
    echo -e "  3. Create project: ${YELLOW}$APPWRITE_PROJECT_ID${NC}"
    echo -e "  4. Create API key with database permissions"
    echo ""
    
    read -p "Enter your API key: " APPWRITE_API_KEY
    
    if ! test_api_key "$APPWRITE_API_KEY"; then
        echo -e "${RED}‚ùå API key test failed${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ API key verified${NC}"
else
    echo -e "${YELLOW}üìã Step 3: Using existing API key...${NC}"
fi

echo -e "${YELLOW}üìã Step 4: Setting up environment...${NC}"
create_env_file "$APPWRITE_API_KEY"
configure_cli "$APPWRITE_API_KEY"

echo -e "${YELLOW}üìã Step 5: Creating database...${NC}"
# Create database if it doesn't exist
appwrite databases create \
    --databaseId "$APPWRITE_DATABASE_ID" \
    --name "$APPWRITE_DATABASE_NAME" 2>/dev/null || echo "Database already exists"

echo -e "${YELLOW}üìã Step 6: Deploying schema...${NC}"
deploy_schema

echo -e "${YELLOW}üìã Step 7: Verifying setup...${NC}"
if verify_setup; then
    echo -e "${GREEN}üéâ Setup completed successfully!${NC}"
else
    echo -e "${RED}‚ùå Setup verification failed${NC}"
    exit 1
fi

# Update iOS config if it exists
if [ -f "iOS/Intrada/Config.plist.template" ]; then
    echo -e "${YELLOW}üì± Updating iOS configuration...${NC}"
    cp iOS/Intrada/Config.plist.template iOS/Intrada/Config.plist
    sed -i.bak "s|https://your-appwrite-endpoint.cloud.appwrite.io/v1|$APPWRITE_ENDPOINT|g" iOS/Intrada/Config.plist
    sed -i.bak "s|your-project-id-here|$APPWRITE_PROJECT_ID|g" iOS/Intrada/Config.plist
    sed -i.bak "s|your-database-id-here|$APPWRITE_DATABASE_ID|g" iOS/Intrada/Config.plist
    sed -i.bak "s|your-collection-id-here|goals|g" iOS/Intrada/Config.plist
    sed -i.bak "s|your-api-key-here|$APPWRITE_API_KEY|g" iOS/Intrada/Config.plist
    rm iOS/Intrada/Config.plist.bak
    echo -e "${GREEN}‚úÖ iOS configuration updated${NC}"
fi

echo ""
echo -e "${BLUE}üìã Setup Summary:${NC}"
echo -e "  ‚Ä¢ Console: ${YELLOW}http://localhost/console${NC}"
echo -e "  ‚Ä¢ API: ${YELLOW}$APPWRITE_ENDPOINT${NC}"
echo -e "  ‚Ä¢ Project: ${YELLOW}$APPWRITE_PROJECT_ID${NC}"
echo -e "  ‚Ä¢ Database: ${YELLOW}$APPWRITE_DATABASE_ID${NC}"
echo -e "  ‚Ä¢ Config: ${YELLOW}.env.local${NC}"
echo ""
echo -e "${BLUE}üîß Next runs:${NC}"
echo -e "  ‚Ä¢ With same API key: ${YELLOW}$0 [api-key]${NC}"
echo -e "  ‚Ä¢ Quick start: ${YELLOW}make start${NC}"
echo -e "  ‚Ä¢ Tear down: ${YELLOW}make teardown${NC}"
echo ""
echo -e "${GREEN}‚úÖ Automation complete! Your Appwrite environment is ready.${NC}" 