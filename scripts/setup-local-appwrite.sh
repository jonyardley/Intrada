#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
APPWRITE_PROJECT_ID="intrada-dev"
APPWRITE_DATABASE_ID="intrada_db"
APPWRITE_DATABASE_NAME="Intrada Database"

echo -e "${BLUE}🚀 Setting up local Appwrite development environment...${NC}"

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}❌ Docker is not running. Please start Docker and try again.${NC}"
    exit 1
fi

# Check if docker-compose is available
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}❌ docker-compose not found. Please install docker-compose.${NC}"
    exit 1
fi

# Start Appwrite services
echo -e "${YELLOW}📦 Starting Appwrite services...${NC}"
docker-compose up -d

# Wait for Appwrite to be ready
echo -e "${YELLOW}⏳ Waiting for Appwrite to be ready...${NC}"
timeout=300  # 5 minutes
elapsed=0
interval=5

while [ $elapsed -lt $timeout ]; do
    if curl -s http://localhost/health > /dev/null 2>&1; then
        echo -e "${GREEN}✅ Appwrite is ready!${NC}"
        break
    fi
    
    echo "Waiting... ($elapsed/$timeout seconds)"
    sleep $interval
    elapsed=$((elapsed + interval))
done

if [ $elapsed -ge $timeout ]; then
    echo -e "${RED}❌ Timeout waiting for Appwrite to start. Check docker logs for issues.${NC}"
    exit 1
fi

# Check if Appwrite CLI is installed
if ! command -v appwrite &> /dev/null; then
    echo -e "${YELLOW}📥 Installing Appwrite CLI...${NC}"
    npm install -g appwrite-cli
fi

# Configure Appwrite CLI for local development
echo -e "${YELLOW}⚙️  Configuring Appwrite CLI for local development...${NC}"

# Set up initial configuration
appwrite client \
    --endpoint http://localhost \
    --projectId $APPWRITE_PROJECT_ID \
    --selfSigned

# Create a development project if it doesn't exist
echo -e "${YELLOW}🏗️  Setting up development project...${NC}"

# Try to get project info, create if it doesn't exist
if ! appwrite projects get --projectId $APPWRITE_PROJECT_ID 2>/dev/null; then
    echo -e "${YELLOW}Creating new project: $APPWRITE_PROJECT_ID${NC}"
    appwrite projects create \
        --projectId $APPWRITE_PROJECT_ID \
        --name "Intrada Development"
else
    echo -e "${GREEN}✅ Project $APPWRITE_PROJECT_ID already exists${NC}"
fi

# Create API key for development
echo -e "${YELLOW}🔑 Creating API key for development...${NC}"
API_KEY_RESPONSE=$(appwrite projects createKey \
    --projectId $APPWRITE_PROJECT_ID \
    --name "Development Key" \
    --scopes "databases.read,databases.write,collections.read,collections.write,attributes.read,attributes.write,indexes.read,indexes.write,documents.read,documents.write" 2>/dev/null || echo "Key already exists")

# Extract API key from response (this would need proper JSON parsing in production)
if [[ $API_KEY_RESPONSE == *"secret"* ]]; then
    API_KEY=$(echo $API_KEY_RESPONSE | grep -o '"secret":"[^"]*' | cut -d'"' -f4)
    echo -e "${GREEN}✅ API Key created: $API_KEY${NC}"
else
    echo -e "${YELLOW}⚠️  Using existing API key. Check Appwrite console for your key.${NC}"
    API_KEY="YOUR_API_KEY_HERE"
fi

# Create environment file for local development
echo -e "${YELLOW}📝 Creating local environment configuration...${NC}"

cat > .env.local << EOF
# Local Appwrite Configuration
# Generated by setup-local-appwrite.sh

APPWRITE_ENDPOINT=http://localhost
APPWRITE_PROJECT_ID=$APPWRITE_PROJECT_ID
APPWRITE_DATABASE_ID=$APPWRITE_DATABASE_ID
APPWRITE_API_KEY=$API_KEY

# iOS Config values
APPWRITE_COLLECTION_ID=goals

# Development flags
NODE_ENV=development
RUST_LOG=debug
EOF

# Generate schema and deploy it
echo -e "${YELLOW}🏗️  Generating and deploying database schema...${NC}"

# Build the Rust CLI tool first
echo -e "${YELLOW}🦀 Building Rust CLI tools...${NC}"
cd infrastructure && cargo build --bin appwrite_cli --features cli

# Generate deployment scripts
echo -e "${YELLOW}📜 Generating deployment scripts...${NC}"
./target/debug/appwrite_cli generate \
    --database-id $APPWRITE_DATABASE_ID \
    --database-name "$APPWRITE_DATABASE_NAME" \
    --output ./appwrite-generated \
    --format shell

# Set environment variables for deployment
export APPWRITE_ENDPOINT=http://localhost
export APPWRITE_PROJECT=$APPWRITE_PROJECT_ID
export APPWRITE_KEY=$API_KEY

# Deploy the schema
echo -e "${YELLOW}🚀 Deploying schema to local Appwrite...${NC}"
if [ -f "./appwrite-generated/deploy.sh" ]; then
    chmod +x ./appwrite-generated/deploy.sh
    ./appwrite-generated/deploy.sh
else
    echo -e "${RED}❌ Deployment script not found. Running direct deployment...${NC}"
    ./target/debug/appwrite_cli deploy \
        --database-id $APPWRITE_DATABASE_ID \
        --database-name "$APPWRITE_DATABASE_NAME" \
        --endpoint http://localhost \
        --project-id $APPWRITE_PROJECT_ID \
        --api-key $API_KEY
fi

cd ..

# Update iOS configuration
echo -e "${YELLOW}📱 Updating iOS configuration...${NC}"
if [ -f "iOS/Intrada/Config.plist.template" ]; then
    if [ ! -f "iOS/Intrada/Config.plist" ]; then
        cp iOS/Intrada/Config.plist.template iOS/Intrada/Config.plist
        
        # Update the config file with local values
        sed -i.bak "s|https://your-appwrite-endpoint.cloud.appwrite.io/v1|http://localhost|g" iOS/Intrada/Config.plist
        sed -i.bak "s|your-project-id-here|$APPWRITE_PROJECT_ID|g" iOS/Intrada/Config.plist
        sed -i.bak "s|your-database-id-here|$APPWRITE_DATABASE_ID|g" iOS/Intrada/Config.plist
        sed -i.bak "s|your-collection-id-here|goals|g" iOS/Intrada/Config.plist
        sed -i.bak "s|your-api-key-here|$API_KEY|g" iOS/Intrada/Config.plist
        
        rm iOS/Intrada/Config.plist.bak
        
        echo -e "${GREEN}✅ iOS Config.plist created and configured${NC}"
    else
        echo -e "${YELLOW}⚠️  iOS Config.plist already exists. Please update manually if needed.${NC}"
    fi
fi

# Create a helpful README for developers
cat > DEVELOPMENT.md << EOF
# Local Development Setup

## Appwrite Configuration

Your local Appwrite instance is running at: http://localhost
Appwrite Console: http://localhost/console

### Project Details
- Project ID: $APPWRITE_PROJECT_ID
- Database ID: $APPWRITE_DATABASE_ID
- API Key: $API_KEY

### Environment Variables
The following environment variables are configured in \`.env.local\`:

\`\`\`
APPWRITE_ENDPOINT=http://localhost
APPWRITE_PROJECT_ID=$APPWRITE_PROJECT_ID
APPWRITE_DATABASE_ID=$APPWRITE_DATABASE_ID
APPWRITE_API_KEY=$API_KEY
\`\`\`

## Managing Schema

### Generate Schema
\`\`\`bash
cd shared
cargo run --bin appwrite_cli --features cli -- generate \\
    --database-id $APPWRITE_DATABASE_ID \\
    --database-name "$APPWRITE_DATABASE_NAME" \\
    --output ../appwrite-generated
\`\`\`

### Deploy Schema Changes
\`\`\`bash
cd shared
cargo run --bin appwrite_cli --features cli -- deploy \\
    --database-id $APPWRITE_DATABASE_ID \\
    --database-name "$APPWRITE_DATABASE_NAME" \\
    --endpoint http://localhost \\
    --project-id $APPWRITE_PROJECT_ID \\
    --api-key $API_KEY
\`\`\`

### Validate Schema
\`\`\`bash
cd shared
cargo run --bin appwrite_cli --features cli -- validate \\
    --database-id $APPWRITE_DATABASE_ID \\
    --database-name "$APPWRITE_DATABASE_NAME"
\`\`\`

## Useful Commands

### Start/Stop Appwrite
\`\`\`bash
# Start
docker-compose up -d

# Stop
docker-compose down

# View logs
docker-compose logs -f appwrite
\`\`\`

### Reset Database
\`\`\`bash
# Stop services
docker-compose down

# Remove volumes (this will delete all data)
docker volume rm \$(docker volume ls -q | grep appwrite)

# Start again
docker-compose up -d

# Re-run this setup script
./scripts/setup-local-appwrite.sh
\`\`\`

## Troubleshooting

1. **Appwrite not responding**: Check if Docker containers are running with \`docker ps\`
2. **Port conflicts**: Make sure ports 80, 443, 8080 are not in use by other services
3. **API key issues**: Regenerate API key from Appwrite console at http://localhost/console
4. **Schema deployment fails**: Check that API key has proper permissions

## Schema Management

The database schema is defined in Rust types and automatically converted to Appwrite collections:

- \`PracticeGoal\` → \`goals\` collection
- \`Study\` → \`studies\` collection  
- \`PracticeSession\` → \`sessions\` collection
- \`StudySession\` → \`study_sessions\` collection

Any changes to these Rust types should be reflected by running the schema deployment commands above.
EOF

echo -e "${GREEN}✅ Local Appwrite development environment setup complete!${NC}"
echo ""
echo -e "${BLUE}🎉 Summary:${NC}"
echo -e "  • Appwrite is running at: ${YELLOW}http://localhost${NC}"
echo -e "  • Console available at: ${YELLOW}http://localhost/console${NC}"
echo -e "  • Project ID: ${YELLOW}$APPWRITE_PROJECT_ID${NC}"
echo -e "  • Database ID: ${YELLOW}$APPWRITE_DATABASE_ID${NC}"
echo -e "  • Configuration saved to: ${YELLOW}.env.local${NC}"
echo -e "  • Development guide: ${YELLOW}DEVELOPMENT.md${NC}"
echo ""
echo -e "${BLUE}Next steps:${NC}"
echo -e "  1. Open Appwrite console at http://localhost/console"
echo -e "  2. Check that your collections were created successfully"
echo -e "  3. Run your iOS app to test the connection"
echo -e "  4. Read ${YELLOW}DEVELOPMENT.md${NC} for schema management commands" 