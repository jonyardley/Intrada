# Cursor Rules for Intrada Project

## 📋 Primary Source of Truth
**Read Claude.MD for complete project context, architecture, and detailed guidelines.**

## 🏗️ Critical Architecture (from Claude.MD)
- **Rust-First**: All business logic in `shared/` using Rust + Crux
- **Type Safety**: Leverage Rust's type system to prevent bugs at compile time  
- **Shared Core**: Single source of truth for business logic across iOS and web
- **Infrastructure as Code**: Database schemas derived from Rust types

## 🚨 Essential Patterns

### Type-State State Machines (Critical!)
Use type-state pattern for state machines - invalid transitions become compile-time errors:
```rust
// State-specific structs
pub struct NotStartedSession { /* state data */ }
pub struct StartedSession { /* state data */ }

// Main enum  
pub enum SessionState {
    NotStarted(NotStartedSession),
    Started(StartedSession),
}

// Consuming transition methods
impl NotStartedSession {
    pub fn start(self) -> Result<StartedSession, &'static str> { /* ... */ }
}
```

## 🎯 AI Assistant Guidelines

### Change Process (from Claude.MD)
1. Start with Rust types in `shared/src/app/`
2. Update schema in `infrastructure/src/schema.rs` if needed
3. Add tests for new functionality
4. Update documentation if APIs change
5. Deploy schema changes via infrastructure tools
6. Update frontends to use new functionality

### Key Principles
- **Investigate First**: Review existing patterns before suggesting changes
- **Type Safety First**: Prefer solutions leveraging Rust's type system
- **Shared Core First**: Business logic changes start in `shared/`
- **Infrastructure Aware**: Schema changes need infrastructure updates
- **Test Coverage**: Include tests for new functionality

## 🚫 Avoid
- Database schemas separate from Rust types
- Mutable state machines allowing invalid transitions  
- Business logic in platform-specific code (iOS/web)
- Skipping tests for new functionality

## 🎵 Project Vision
Intrada empowers musicians to achieve mastery through structured, efficient, and deeply reflective practice.

---

**For complete details, workflows, standards, and examples: See Claude.MD** 