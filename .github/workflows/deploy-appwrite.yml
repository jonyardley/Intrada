name: Deploy Appwrite Schema

on:
  push:
    branches: [main, staging]
    paths:
      - 'infrastructure/src/schema.rs'
      - 'infrastructure/src/migrations.rs'
      - 'shared/src/app/goal.rs'
      - 'shared/src/app/study.rs'
      - 'shared/src/app/session.rs'
      - 'shared/src/app/study_session.rs'
      - 'shared/src/app/model.rs'
      - '.github/workflows/deploy-appwrite.yml'
  
  pull_request:
    branches: [main, staging]
    paths:
      - 'infrastructure/src/schema.rs'
      - 'infrastructure/src/migrations.rs'
      - 'shared/src/app/goal.rs'
      - 'shared/src/app/study.rs'
      - 'shared/src/app/session.rs'
      - 'shared/src/app/study_session.rs'
      - 'shared/src/app/model.rs'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      dry_run:
        description: 'Run in dry-run mode (show commands without executing)'
        required: false
        default: false
        type: boolean

env:
  RUST_VERSION: 1.80

jobs:
  validate-schema:
    name: Validate Schema
    runs-on: ubuntu-latest
    outputs:
      schema-changed: ${{ steps.check-changes.outputs.schema-changed }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          infrastructure/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check for schema changes
      id: check-changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E "(schema\.rs|goal\.rs|study\.rs|session\.rs|study_session\.rs|model\.rs)"; then
          echo "schema-changed=true" >> $GITHUB_OUTPUT
          echo "Schema files have changed"
        else
          echo "schema-changed=false" >> $GITHUB_OUTPUT
          echo "No schema changes detected"
        fi

    - name: Build CLI tools
      working-directory: infrastructure
      run: |
        cargo build --bin appwrite_cli --features cli --release

    - name: Validate schema consistency
      working-directory: infrastructure
      run: |
        ./target/release/appwrite_cli validate \
          --database-id intrada_db \
          --database-name "Intrada Database"

    - name: Generate schema artifacts
      working-directory: infrastructure
      run: |
        # Generate different formats for validation
        ./target/release/appwrite_cli generate \
          --database-id intrada_db \
          --database-name "Intrada Database" \
          --output ../appwrite-generated \
          --format json
        
        ./target/release/appwrite_cli generate \
          --database-id intrada_db \
          --database-name "Intrada Database" \
          --output ../appwrite-generated \
          --format shell
        
        ./target/release/appwrite_cli generate \
          --database-id intrada_db \
          --database-name "Intrada Database" \
          --output ../appwrite-generated \
          --format terraform

    - name: Upload schema artifacts
      uses: actions/upload-artifact@v4
      with:
        name: appwrite-schema-${{ github.sha }}
        path: appwrite-generated/
        retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate-schema
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/staging') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging') ||
      (needs.validate-schema.outputs.schema-changed == 'true' && github.event_name == 'pull_request')
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          infrastructure/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Appwrite CLI
      run: npm install -g appwrite-cli

    - name: Build CLI tools
      working-directory: infrastructure
      run: |
        cargo build --bin appwrite_cli --features cli --release

    - name: Deploy to Staging
      working-directory: infrastructure
      env:
        APPWRITE_ENDPOINT: ${{ secrets.STAGING_APPWRITE_ENDPOINT }}
        APPWRITE_PROJECT: ${{ secrets.STAGING_APPWRITE_PROJECT_ID }}
        APPWRITE_KEY: ${{ secrets.STAGING_APPWRITE_API_KEY }}
      run: |
        if [ "${{ inputs.dry_run }}" == "true" ]; then
          echo "🔍 Running in dry-run mode for staging"
          ./target/release/appwrite_cli deploy \
            --database-id intrada_db \
            --database-name "Intrada Database (Staging)" \
            --endpoint $APPWRITE_ENDPOINT \
            --project-id $APPWRITE_PROJECT \
            --api-key $APPWRITE_KEY \
            --dry-run
        else
          echo "🚀 Deploying schema to staging"
          ./target/release/appwrite_cli deploy \
            --database-id intrada_db \
            --database-name "Intrada Database (Staging)" \
            --endpoint $APPWRITE_ENDPOINT \
            --project-id $APPWRITE_PROJECT \
            --api-key $APPWRITE_KEY
        fi

    - name: Create deployment summary
      run: |
        echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Staging" >> $GITHUB_STEP_SUMMARY
        echo "**Database ID:** intrada_db" >> $GITHUB_STEP_SUMMARY
        echo "**Endpoint:** ${{ secrets.STAGING_APPWRITE_ENDPOINT }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Dry Run:** ${{ inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-schema, deploy-staging]
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          infrastructure/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Appwrite CLI
      run: npm install -g appwrite-cli

    - name: Build CLI tools
      working-directory: infrastructure
      run: |
        cargo build --bin appwrite_cli --features cli --release

    - name: Pre-deployment validation
      working-directory: infrastructure
      run: |
        echo "🔍 Running pre-deployment validation"
        ./target/release/appwrite_cli validate \
          --database-id intrada_db \
          --database-name "Intrada Database"

    - name: Deploy to Production
      working-directory: infrastructure
      env:
        APPWRITE_ENDPOINT: ${{ secrets.PRODUCTION_APPWRITE_ENDPOINT }}
        APPWRITE_PROJECT: ${{ secrets.PRODUCTION_APPWRITE_PROJECT_ID }}
        APPWRITE_KEY: ${{ secrets.PRODUCTION_APPWRITE_API_KEY }}
      run: |
        if [ "${{ inputs.dry_run }}" == "true" ]; then
          echo "🔍 Running in dry-run mode for production"
          ./target/release/appwrite_cli deploy \
            --database-id intrada_db \
            --database-name "Intrada Database" \
            --endpoint $APPWRITE_ENDPOINT \
            --project-id $APPWRITE_PROJECT \
            --api-key $APPWRITE_KEY \
            --dry-run
        else
          echo "🚀 Deploying schema to production"
          ./target/release/appwrite_cli deploy \
            --database-id intrada_db \
            --database-name "Intrada Database" \
            --endpoint $APPWRITE_ENDPOINT \
            --project-id $APPWRITE_PROJECT \
            --api-key $APPWRITE_KEY
        fi

    - name: Post-deployment verification
      working-directory: shared
      env:
        APPWRITE_ENDPOINT: ${{ secrets.PRODUCTION_APPWRITE_ENDPOINT }}
        APPWRITE_PROJECT: ${{ secrets.PRODUCTION_APPWRITE_PROJECT_ID }}
        APPWRITE_KEY: ${{ secrets.PRODUCTION_APPWRITE_API_KEY }}
      run: |
        echo "✅ Running post-deployment verification"
        # Add verification steps here, like checking that collections exist
        # This could use the Appwrite CLI to list databases and collections

    - name: Create deployment summary
      run: |
        echo "## 🎉 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
        echo "**Database ID:** intrada_db" >> $GITHUB_STEP_SUMMARY
        echo "**Endpoint:** ${{ secrets.PRODUCTION_APPWRITE_ENDPOINT }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Dry Run:** ${{ inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY

    - name: Create GitHub Release
      if: inputs.dry_run != true
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: deploy-${{ github.sha }}
        release_name: Appwrite Schema Deployment ${{ github.sha }}
        body: |
          ## Appwrite Schema Deployment
          
          **Commit:** ${{ github.sha }}
          **Environment:** Production
          **Database:** intrada_db
          
          This release represents the deployment of the Appwrite database schema to production.
          
          ### Schema Changes
          - Database schema automatically generated from Rust types
          - Collections: goals, studies, sessions, study_sessions
          - Deployed via infrastructure-as-code
        draft: false
        prerelease: false

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-schema, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Deployment completed successfully!"
        # Add Slack/Discord notification here if needed

    - name: Deployment Failure Notification
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Discord notification here if needed
        exit 1 