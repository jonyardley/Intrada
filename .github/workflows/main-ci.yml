name: Main CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - development
        - production

env:
  CARGO_TERM_COLOR: always
  APPWRITE_DATABASE_ID: intrada_db
  APPWRITE_DATABASE_NAME: "Intrada Database"

# Prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job to determine what changed and what needs to be built
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      ios: ${{ steps.changes.outputs.ios }}
      web: ${{ steps.changes.outputs.web }}
      appwrite: ${{ steps.changes.outputs.appwrite }}
      crux: ${{ steps.changes.outputs.crux }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - 'shared/**'
              - 'infrastructure/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'rust-toolchain.toml'
            ios:
              - 'iOS/**'
              - 'shared/**'
              - '.github/workflows/main-ci.yml'
            web:
              - 'web-leptos/**'
              - 'shared/**'
              - '.github/workflows/main-ci.yml'
            appwrite:
              - 'infrastructure/**'
              - 'appwrite.json'
              - 'scripts/setup-appwrite-complete.sh'
            crux:
              - 'scripts/setup-crux.sh'
              - '.github/scripts/detect-environment.sh'
              - 'Cargo.toml'
              - 'shared/Cargo.toml'

  # Basic Rust checks (formatting, clippy, tests)
  rust-checks:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Crux dependency
        if: needs.changes.outputs.crux == 'true'
        run: |
          ./scripts/setup-crux.sh
        env:
          CI: true
          CRUX_REPO: "redbadger/crux"
          CRUX_REF: "main"
          CRUX_PATH: "../crux"
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-rust-v2
            
      - name: Check code formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Run tests
        run: |
          cargo test --workspace
          cd infrastructure && cargo test --features cli

  # iOS build and test
  ios-build:
    runs-on: macos-14
    needs: changes
    if: needs.changes.outputs.ios == 'true'
    env:
      DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Crux dependency
        if: needs.changes.outputs.crux == 'true'
        run: |
          ./scripts/setup-crux.sh
        env:
          CI: true
          CRUX_REPO: "redbadger/crux"
          CRUX_REF: "main"
          CRUX_PATH: "../crux"

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.2'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios,aarch64-apple-ios-sim,x86_64-apple-ios

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            shared/target
          key: ${{ runner.os }}-ios-rust-${{ hashFiles('shared/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-ios-rust-v2

      - name: Install cargo-lipo
        run: |
          if ! command -v cargo-lipo &> /dev/null; then
            cargo install cargo-lipo
          fi

      - name: Build iOS app
        run: |
          cd shared
          cargo lipo --release --targets aarch64-apple-ios,aarch64-apple-ios-sim,x86_64-apple-ios
          cargo run --bin uniffi-bindgen generate src/shared.udl --language swift --out-dir ../iOS/Generated/
          
          cd ../iOS
          xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest' \
            clean build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

  # Web build and test
  web-build:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Crux dependency
        if: needs.changes.outputs.crux == 'true'
        run: |
          ./scripts/setup-crux.sh
        env:
          CI: true
          CRUX_REPO: "redbadger/crux"
          CRUX_REF: "main"
          CRUX_PATH: "../crux"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            web-leptos/target
          key: ${{ runner.os }}-web-rust-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-web-rust-v2

      - name: Install Trunk
        run: cargo install trunk --force

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "web-leptos/package-lock.json"

      - name: Install NPM dependencies
        run: npm ci
        working-directory: ./web-leptos

      - name: Build web app
        run: |
          cd web-leptos
          npm run build:all
          
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./web-leptos/dist
          retention-days: 1

  # Appwrite deployment
  appwrite-deploy:
    runs-on: ubuntu-latest
    needs: [changes, rust-checks]
    if: needs.changes.outputs.appwrite == 'true' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Crux dependency
        if: needs.changes.outputs.crux == 'true'
        run: |
          ./scripts/setup-crux.sh
        env:
          CI: true
          CRUX_REPO: "redbadger/crux"
          CRUX_REF: "main"
          CRUX_PATH: "../crux"
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}-v2
          restore-keys: |
            ${{ runner.os }}-rust-v2
            
      - name: Build CLI tool
        run: |
          cd infrastructure
          cargo build --bin appwrite_cli --features cli --release
          
      - name: Deploy to development
        if: github.ref != 'refs/heads/main'
        run: |
          # Setup local Appwrite for development
          docker compose up -d
          timeout 120 bash -c 'until curl -s http://localhost/v1/health > /dev/null 2>&1; do sleep 2; done'
          
          cd infrastructure
          ../target/release/appwrite_cli deploy \
            --database-id $APPWRITE_DATABASE_ID \
            --database-name "$APPWRITE_DATABASE_NAME" \
            --environment development

  # Vercel deployment (only for main branch)
  vercel-deploy:
    runs-on: ubuntu-latest
    needs: [changes, web-build]
    if: needs.changes.outputs.web == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    env:
      VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./web-leptos/dist

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy to Vercel
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} 