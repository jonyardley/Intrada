name: Main CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto
        - development
        - production

env:
  CARGO_TERM_COLOR: always
  APPWRITE_DATABASE_ID: intrada_db
  APPWRITE_DATABASE_NAME: "Intrada Database"

# Prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job to determine what changed and what needs to be built
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      ios: ${{ steps.changes.outputs.ios }}
      web: ${{ steps.changes.outputs.web }}
      appwrite: ${{ steps.changes.outputs.appwrite }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - 'shared/**'
              - 'infrastructure/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'rust-toolchain.toml'
            ios:
              - 'iOS/**'
              - 'shared/**'
              - '.github/workflows/main-ci.yml'
            web:
              - 'web-leptos/**'
              - 'shared/**'
              - '.github/workflows/main-ci.yml'
            appwrite:
              - 'infrastructure/**'
              - 'appwrite.json'
              - 'scripts/setup-appwrite-complete.sh'

  # Pre-compile Rust dependencies for reuse across jobs
  compile-deps:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.appwrite == 'true'
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}-v1
          restore-keys: |
            rust-toolchain-${{ runner.os }}-
            
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          components: clippy, rustfmt
          
      - name: Generate cache key
        id: cache-key
        run: |
          key="deps-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-v3"
          echo "key=$key" >> $GITHUB_OUTPUT
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/debug/deps
            target/debug/build
            target/wasm32-unknown-unknown/debug/deps
            target/wasm32-unknown-unknown/debug/build
            shared/target/debug/deps
            shared/target/debug/build
            web-leptos/target/debug/deps
            web-leptos/target/debug/build
            web-leptos/target/wasm32-unknown-unknown/debug/deps
            web-leptos/target/wasm32-unknown-unknown/debug/build
            infrastructure/target/debug/deps
            infrastructure/target/debug/build
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-${{ runner.os }}-v3
            
      - name: Pre-compile dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          # Pre-compile workspace dependencies (host target)
          cargo fetch --locked
          cargo build --workspace --lib --bins --no-default-features
          
          # Pre-compile web dependencies (WASM target)
          cd web-leptos
          cargo fetch --locked
          cargo build --target wasm32-unknown-unknown --lib --no-default-features
          
          # Pre-compile infrastructure dependencies
          cd ../infrastructure
          cargo fetch --locked
          cargo build --lib --no-default-features
          
          # Pre-compile shared dependencies
          cd ../shared
          cargo fetch --locked
          cargo build --lib --no-default-features
          cargo build --target wasm32-unknown-unknown --lib --no-default-features

  # Basic Rust checks (formatting, clippy, tests)
  rust-checks:
    runs-on: ubuntu-latest
    needs: [changes, compile-deps]
    if: needs.changes.outputs.rust == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}-v1
          restore-keys: |
            rust-toolchain-${{ runner.os }}-
            
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
          
      - name: Restore Rust dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/debug/deps
            target/debug/build
            shared/target/debug/deps
            shared/target/debug/build
            infrastructure/target/debug/deps
            infrastructure/target/debug/build
          key: ${{ needs.compile-deps.outputs.cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-v3
            
      - name: Check code formatting
        run: cargo fmt --all -- --check
        
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Run tests
        run: |
          cargo test --workspace
          cd infrastructure && cargo test --features cli

  # Pre-compile iOS dependencies
  compile-ios-deps:
    runs-on: macos-15
    needs: changes
    if: needs.changes.outputs.ios == 'true'
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}-ios-v1
          restore-keys: |
            rust-toolchain-${{ runner.os }}-ios-
            rust-toolchain-${{ runner.os }}-
            
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios-sim,x86_64-apple-ios
          
      - name: Generate cache key
        id: cache-key
        run: |
          key="ios-deps-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}-v3"
          echo "key=$key" >> $GITHUB_OUTPUT
          
      - name: Cache iOS Rust dependencies
        uses: actions/cache@v4
        id: cache-ios-deps
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            shared/target/aarch64-apple-ios-sim/debug/deps
            shared/target/aarch64-apple-ios-sim/debug/build
            shared/target/x86_64-apple-ios/debug/deps
            shared/target/x86_64-apple-ios/debug/build
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ios-deps-${{ runner.os }}-v3
            

      - name: Cache cargo tools
        uses: actions/cache@v4
        id: cache-cargo-tools
        with:
          path: ~/.cargo/bin
          key: cargo-tools-${{ runner.os }}-v1
          restore-keys: |
            cargo-tools-${{ runner.os }}-
            
      - name: Install cargo-swift
        if: steps.cache-cargo-tools.outputs.cache-hit != 'true'
        run: |
          if ! command -v cargo-swift &> /dev/null; then
            cargo install cargo-swift
          fi
          
      - name: Pre-compile iOS dependencies
        if: steps.cache-ios-deps.outputs.cache-hit != 'true'
        run: |
          cd shared
          cargo fetch --locked
          # Pre-compile dependencies for host target (needed for cargo-swift)
          cargo build --lib --no-default-features

  # iOS build and test
  ios-build:
    runs-on: macos-15
    needs: [changes, compile-ios-deps]
    if: needs.changes.outputs.ios == 'true'
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.0.app/Contents/Developer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}-ios-v1
          restore-keys: |
            rust-toolchain-${{ runner.os }}-ios-
            rust-toolchain-${{ runner.os }}-
            
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios-sim,x86_64-apple-ios

      - name: Restore iOS Rust dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            shared/target/aarch64-apple-ios-sim/debug/deps
            shared/target/aarch64-apple-ios-sim/debug/build
            shared/target/x86_64-apple-ios/debug/deps
            shared/target/x86_64-apple-ios/debug/build
          key: ${{ needs.compile-ios-deps.outputs.cache-key }}
          restore-keys: |
            ios-deps-${{ runner.os }}-v3

      - name: Cache cargo tools
        uses: actions/cache@v4
        id: cache-cargo-tools-ios
        with:
          path: ~/.cargo/bin
          key: cargo-tools-${{ runner.os }}-v1
          restore-keys: |
            cargo-tools-${{ runner.os }}-
            
      - name: Install cargo-swift
        if: steps.cache-cargo-tools-ios.outputs.cache-hit != 'true'
        run: |
          if ! command -v cargo-swift &> /dev/null; then
            cargo install cargo-swift
          fi

      - name: Build shared library for bindgen
        run: |
          cd shared
          cargo build --lib
          
      - name: Cache generated types
        uses: actions/cache@v4
        id: cache-typegen
        with:
          path: |
            iOS/SharedTypes
            shared/generated
            shared/Shared
          key: typegen-${{ hashFiles('shared/src/**/*.rs', 'typegen.sh') }}-v2
          restore-keys: |
            typegen-
            
      - name: Generate Swift types and bindings
        if: steps.cache-typegen.outputs.cache-hit != 'true'
        run: |
          ./typegen.sh
          
      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: xcode-deriveddata-${{ runner.os }}-${{ hashFiles('iOS/**/*.swift', 'iOS/**/*.plist', 'iOS/**/*.pbxproj') }}
          restore-keys: |
            xcode-deriveddata-${{ runner.os }}-
            
      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/org.swift.swiftpm
          key: spm-${{ runner.os }}-${{ hashFiles('iOS/Intrada.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
          restore-keys: |
            spm-${{ runner.os }}-
            
      - name: Create Config.plist with secrets
        run: |
          cp iOS/Intrada/Config.plist.template iOS/Intrada/Config.plist
          # Replace placeholders with actual values from GitHub secrets
          sed -i '' 's|https://your-appwrite-endpoint.cloud.appwrite.io/v1|${{ secrets.APPWRITE_ENDPOINT }}|g' iOS/Intrada/Config.plist
          sed -i '' 's|your-project-id-here|${{ secrets.APPWRITE_PROJECT_ID }}|g' iOS/Intrada/Config.plist
          sed -i '' 's|your-database-id-here|${{ secrets.APPWRITE_DATABASE_ID }}|g' iOS/Intrada/Config.plist
          sed -i '' 's|your-api-key-here|${{ secrets.APPWRITE_API_KEY }}|g' iOS/Intrada/Config.plist
          
      - name: Build and test iOS app
        run: |
          cd iOS
          # Build the app
          xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            clean build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO
            
          # Run tests if they exist
          xcodebuild test \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            || echo "No tests found or tests failed - continuing build verification"

  # Web build and test
  web-build:
    runs-on: ubuntu-latest
    needs: [changes, compile-deps]
    if: needs.changes.outputs.web == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Crux dependency
        if: needs.changes.outputs.crux == 'true'
        uses: actions/cache@v4
        id: cache-crux
        with:
          path: ../crux
          key: crux-${{ runner.os }}-main-${{ hashFiles('scripts/setup-crux.sh') }}-v1
          restore-keys: |
            crux-${{ runner.os }}-main-
            
      - name: Setup Crux dependency
        if: needs.changes.outputs.crux == 'true' && steps.cache-crux.outputs.cache-hit != 'true'
        run: |
          ./scripts/setup-crux.sh
        env:
          CI: true
          CRUX_REPO: "redbadger/crux"
          CRUX_REF: "main"
          CRUX_PATH: "../crux"

      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}-wasm-v1
          restore-keys: |
            rust-toolchain-${{ runner.os }}-wasm-
            rust-toolchain-${{ runner.os }}-
            
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Restore Rust dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/wasm32-unknown-unknown/debug/deps
            target/wasm32-unknown-unknown/debug/build
            web-leptos/target/debug/deps
            web-leptos/target/debug/build
            web-leptos/target/wasm32-unknown-unknown/debug/deps
            web-leptos/target/wasm32-unknown-unknown/debug/build
            shared/target/debug/deps
            shared/target/debug/build
          key: ${{ needs.compile-deps.outputs.cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-v3

      - name: Cache trunk
        uses: actions/cache@v4
        id: cache-trunk
        with:
          path: |
            ~/.cargo/bin/trunk
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
          key: trunk-${{ runner.os }}-v1
          
      - name: Install Trunk
        if: steps.cache-trunk.outputs.cache-hit != 'true'
        run: cargo install trunk

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "web-leptos/package-lock.json"
          
      - name: Cache Tailwind CSS and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            web-leptos/node_modules/.cache
            web-leptos/.trunk
            web-leptos/style/output.css
            web-leptos/dist
          key: tailwind-${{ runner.os }}-${{ hashFiles('web-leptos/tailwind.config.js', 'web-leptos/package-lock.json', 'web-leptos/style/input.css') }}
          restore-keys: |
            tailwind-${{ runner.os }}-

      - name: Install NPM dependencies
        run: npm ci
        working-directory: ./web-leptos

      - name: Build web app
        run: |
          cd web-leptos
          npm run build
          
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./web-leptos/dist
          retention-days: 1

  # Appwrite deployment
  appwrite-deploy:
    runs-on: ubuntu-latest
    needs: [changes, rust-checks, compile-deps]
    if: needs.changes.outputs.appwrite == 'true' && (github.event_name == 'push' || github.event_name == 'pull_request')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: rust-toolchain-${{ runner.os }}-${{ hashFiles('rust-toolchain.toml') }}-v1
          restore-keys: |
            rust-toolchain-${{ runner.os }}-
            
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Restore Rust dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/debug/deps
            target/debug/build
            infrastructure/target/debug/deps
            infrastructure/target/debug/build
            shared/target/debug/deps
            shared/target/debug/build
          key: ${{ needs.compile-deps.outputs.cache-key }}
          restore-keys: |
            deps-${{ runner.os }}-v3
            
      - name: Cache infrastructure build
        uses: actions/cache@v4
        with:
          path: |
            infrastructure/target/release/deps
            infrastructure/target/release/build
            infrastructure/target/release/.fingerprint
          key: infrastructure-release-${{ runner.os }}-${{ hashFiles('infrastructure/Cargo.lock', 'infrastructure/src/**') }}
          restore-keys: |
            infrastructure-release-${{ runner.os }}-
            
      - name: Build CLI tool
        run: |
          cd infrastructure
          cargo build --bin appwrite_cli --features cli --release
          
      - name: Cache Appwrite CLI
        uses: actions/cache@v4
        id: cache-appwrite-cli
        with:
          path: ~/.local/bin/appwrite
          key: appwrite-cli-${{ runner.os }}-v1
          restore-keys: |
            appwrite-cli-${{ runner.os }}-
            
      - name: Install Appwrite CLI
        if: steps.cache-appwrite-cli.outputs.cache-hit != 'true'
        run: |
          curl -sL https://appwrite.io/cli/install.sh | bash
          # Make sure it's in PATH
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
      - name: Configure Appwrite CLI
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          # Test CLI installation
          appwrite --version || echo "Appwrite CLI not found in PATH"
          
      - name: Set up Docker Buildx
        if: github.ref != 'refs/heads/main'
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        if: github.ref != 'refs/heads/main'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-${{ runner.os }}-
            
      - name: Deploy to development
        if: github.ref != 'refs/heads/main'
        run: |
          # Setup local Appwrite for development
          docker compose up -d
          echo "Waiting for Appwrite to be ready..."
          
          # Wait for health endpoint
          timeout 180 bash -c 'until curl -s http://localhost/health > /dev/null 2>&1; do echo "Waiting for Appwrite health..."; sleep 5; done'
          
          # Wait for API to be fully ready
          echo "Waiting for Appwrite API to be ready..."
          timeout 120 bash -c 'until curl -s http://localhost/v1/health > /dev/null 2>&1; do echo "Waiting for Appwrite API..."; sleep 5; done'
          
          # Additional wait for services to stabilize
          echo "Allowing services to stabilize..."
          sleep 10
          
          # Configure Appwrite CLI to use local instance
          export PATH="$HOME/.local/bin:$PATH"
          echo "Configuring Appwrite CLI..."
          appwrite client --endpoint http://localhost/v1 --self-signed true
          
          # Build our CLI tool
          echo "Building CLI tool..."
          cd infrastructure
          cargo build --bin appwrite_cli --features cli --release
          
          # Verify CLI tool was built
          echo "Checking CLI tool..."
          ls -la target/release/appwrite_cli || echo "CLI tool not found"
          
          # Deploy schema
          echo "Deploying schema..."
          ./target/release/appwrite_cli deploy \
            --database-id $APPWRITE_DATABASE_ID \
            --database-name "$APPWRITE_DATABASE_NAME" \
            --environment development

  # Vercel deployment (preview for branches, production for main)
  vercel-deploy:
    runs-on: ubuntu-latest
    needs: [changes, web-build]
    if: needs.changes.outputs.web == 'true' && (github.event_name == 'push' || github.event_name == 'pull_request')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
    env:
      VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./web-leptos/dist

      - name: Cache Vercel CLI
        uses: actions/cache@v4
        id: cache-vercel
        with:
          path: |
            ~/.npm
            ~/.npm-global
          key: vercel-cli-${{ runner.os }}-v2
          restore-keys: |
            vercel-cli-${{ runner.os }}-
            
      - name: Install Vercel CLI
        run: |
          npm install --global vercel@latest
          echo "$(npm bin --global)" >> $GITHUB_PATH

      - name: Deploy to Vercel
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Production deployment for main branch
            vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
            vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
            vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            # Preview deployment for other branches
            vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
            vercel build --token=${{ secrets.VERCEL_TOKEN }}
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          fi 