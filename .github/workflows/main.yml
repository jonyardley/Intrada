name: CI/CD Pipeline (TESTING VERSION - Deploy on any branch)
on:
  push:
    branches: [main, fix-server-deploy-2]  # TESTING: Allow deployment from fix-server-deploy-2 branch
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

# Prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Check if previous workflow run failed
  check-previous:
    runs-on: ubuntu-latest
    outputs:
      previous-failed: ${{ steps.check.outputs.previous-failed }}
      deploy-job-failed: ${{ steps.check.outputs.deploy-job-failed }}
    steps:
      - name: Check previous workflow status
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get the workflow file name from the current context
              const workflowFile = 'main.yml';
              
              // For PR events, check the target branch; for push events, use the current branch
              let branch = 'main';
              if (context.eventName === 'pull_request') {
                branch = context.payload.pull_request.base.ref;
              } else if (context.ref.startsWith('refs/heads/')) {
                branch = context.ref.replace('refs/heads/', '');
              }
              
              console.log(`Checking workflow runs for branch: ${branch}`);
              console.log(`Current run ID: ${context.runId}`);
              console.log(`Current SHA: ${context.sha}`);
              
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFile,
                per_page: 20,
                branch: branch
              });
              
              console.log(`Found ${runs.workflow_runs.length} workflow runs`);
              
              // Log details of recent runs for debugging
              runs.workflow_runs.slice(0, 5).forEach(run => {
                console.log(`Run ${run.id}: ${run.head_sha.substring(0, 7)} - ${run.conclusion} - ${run.created_at}`);
              });
              
              // Find the most recent completed run that's not the current one
              const previousRun = runs.workflow_runs.find(run => 
                run.id !== context.runId && 
                run.head_sha !== context.sha &&
                ['success', 'failure', 'cancelled'].includes(run.conclusion)
              );
              
              const failed = previousRun && previousRun.conclusion === 'failure';
              console.log(`Previous run (${previousRun?.id || 'none'}): ${previousRun?.conclusion || 'none'}`);
              console.log(`Setting previous-failed to: ${failed.toString()}`);
              
              core.setOutput('previous-failed', failed.toString());
              
              // Additional check: look for any failed deploy-server jobs in recent runs (last 5)
              let deployJobFailed = false;
              for (const run of runs.workflow_runs.slice(0, 5)) {
                if (['success', 'failure', 'cancelled'].includes(run.conclusion)) {
                  try {
                    const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: run.id
                    });
                    
                    const deployJob = jobs.jobs.find(job => job.name === 'deploy-server');
                    if (deployJob && deployJob.conclusion === 'failure') {
                      console.log(`Found failed deploy-server job in run ${run.id}`);
                      deployJobFailed = true;
                      break; // Found a recent failure, that's enough
                    } else if (deployJob && deployJob.conclusion === 'success') {
                      console.log(`Found successful deploy-server job in run ${run.id}, stopping search`);
                      break; // Found a recent success, no need to re-run
                    }
                  } catch (jobError) {
                    console.log(`Could not check jobs for run ${run.id}: ${jobError.message}`);
                  }
                }
              }
              
              core.setOutput('deploy-job-failed', deployJobFailed.toString());
              console.log(`Setting deploy-job-failed to: ${deployJobFailed.toString()}`)
              
            } catch (error) {
              console.log(`Error checking previous status: ${error.message}`);
              // Don't fail the job, just assume no previous failure
              core.setOutput('previous-failed', 'false');
              core.setOutput('deploy-job-failed', 'false');
            }

  # Determine what changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      ios: ${{ steps.changes.outputs.ios }}
      # web: ${{ steps.changes.outputs.web }} # PARKED
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - 'shared/**'
              - 'server/**'
              - 'shared_types/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'rust-toolchain.toml'
            ios:
              - 'iOS/**'
              - 'shared/**'
              - 'shared_types/**'
            # web: # PARKED - Leptos web app development paused
            #   - 'web-leptos/**'
            #   - 'shared/**'
            #   - 'shared_types/**'

  # Core Rust testing - runs on all commits
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Setup cargo tools
        uses: ./.github/actions/setup-cargo-tools
        with:
          tools: 'nextest'

      - name: Cache build
        uses: ./.github/actions/cache-cargo-build
        with:
          cache-key: 'test-${{ runner.os }}'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Build workspace
        run: cargo build --workspace

      - name: Run tests
        run: cargo nextest run --workspace

      - name: Build release server binary
        run: cargo build --release --bin server

      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-binary
          path: target/release/server
          retention-days: 1

  # iOS build - when iOS code changes, manually dispatched, or previous build failed
  ios:
    runs-on: macos-15
    needs: [changes, check-previous]
    if: >
      needs.changes.outputs.ios == 'true' || 
      github.event_name == 'workflow_dispatch' ||
      github.run_attempt > 1 ||
      needs.check-previous.outputs.previous-failed == 'true'
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.0.app/Contents/Developer
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'aarch64-apple-ios-sim,x86_64-apple-ios'

      - name: Setup cargo tools
        uses: ./.github/actions/setup-cargo-tools
        with:
          tools: 'cargo-swift'

      - name: Cache build
        uses: ./.github/actions/cache-cargo-build
        with:
          cache-key: 'ios-${{ runner.os }}'
          additional-paths: |
            ~/Library/Caches/org.swift.swiftpm
            iOS/.build

      - name: Cache Homebrew and tools
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew/Library/Taps
            /usr/local/Cellar/xcodegen
            /usr/local/bin/xcodegen
            /usr/local/Cellar/swiftlint
            /usr/local/bin/swiftlint
          key: brew-tools-${{ runner.os }}-xcodegen-swiftlint-v3
          restore-keys: |
            brew-tools-${{ runner.os }}-xcodegen-swiftlint-
            brew-tools-${{ runner.os }}-xcodegen-
            brew-tools-${{ runner.os }}-

      - name: Install xcodegen and SwiftLint
        run: |
          if ! command -v xcodegen &> /dev/null; then
            echo "Installing xcodegen..."
            brew install xcodegen
          else
            echo "xcodegen already available"
          fi
          
          if ! command -v swiftlint &> /dev/null; then
            echo "Installing SwiftLint..."
            brew install swiftlint
          else
            echo "SwiftLint already available"
          fi

      - name: Build iOS targets
        run: |
          cargo build --lib --target aarch64-apple-ios-sim
          cargo build --lib --target x86_64-apple-ios

      - name: Build shared crate for typegen
        run: cargo build -p shared --features cli

      - name: Build shared_types
        run: cargo build -p shared_types

      - name: Generate Swift bindings
        run: ./typegen.sh

      - name: Cache Xcode DerivedData and SwiftPM
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData
            ~/Library/Caches/org.swift.swiftpm
            ~/Library/Caches/SwiftPM
            iOS/.swiftpm
            iOS/build
          key: xcode-derived-${{ runner.os }}-${{ hashFiles('iOS/**/*.swift', 'shared/**/*.rs', 'iOS/project.yml') }}-v3
          restore-keys: |
            xcode-derived-${{ runner.os }}-${{ hashFiles('iOS/project.yml') }}-v3
            xcode-derived-${{ runner.os }}-${{ hashFiles('iOS/project.yml') }}-
            xcode-derived-${{ runner.os }}-

      - name: Generate Xcode project
        run: |
          cd iOS
          xcodegen generate

      - name: Run SwiftLint
        run: |
          echo "Running SwiftLint on iOS code..."
          swiftlint lint iOS/Intrada --reporter github-actions-logging

      - name: Cache iOS runtimes and system caches
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/com.apple.dt.Xcode
            ~/Library/Developer/Xcode/iOS DeviceSupport
          key: ios-system-${{ runner.os }}-xcode-16-v3
          restore-keys: |
            ios-system-${{ runner.os }}-xcode-16-
            ios-system-${{ runner.os }}-

      - name: Check iOS runtime availability
        run: |
          # Check what iOS runtimes are available (don't modify system state for better caching)
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes | grep iOS || echo "No iOS runtimes found in list"
          
          # Check if we have iOS 17+ runtimes
          if xcrun simctl list runtimes | grep -E "iOS (17|18)"; then
            echo "✅ iOS 17+ runtimes available"
          else
            echo "⚠️ No iOS 17+ runtimes found, but continuing with available runtimes"
          fi

      - name: List available simulators
        run: xcrun simctl list devices available


      - name: Build iOS app
        run: |
          cd iOS
          echo "Building iOS app for simulator (cache-friendly approach)"
          
          # Use generic platform destination for consistent caching
          # This approach produces the same build artifacts regardless of specific simulators available
          echo "Building with generic iOS Simulator destination for better caching..."
          xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'generic/platform=iOS Simulator' \
            build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            ONLY_ACTIVE_ARCH=YES \
            -quiet \
            | tee build.log || {
            echo "Generic build failed, trying with specific simulator..."
            
            # Fallback: Find any available iPhone simulator
            SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone" | head -1 | sed -n 's/.*(\([A-F0-9-]*\)).*/\1/p')
            if [ ! -z "$SIMULATOR_ID" ]; then
              echo "Using fallback simulator ID: $SIMULATOR_ID"
              xcodebuild \
                -project Intrada.xcodeproj \
                -scheme Intrada \
                -configuration Debug \
                -sdk iphonesimulator \
                -destination "id=$SIMULATOR_ID" \
                build \
                CODE_SIGNING_REQUIRED=NO \
                CODE_SIGNING_ALLOWED=NO \
                ONLY_ACTIVE_ARCH=YES \
                -quiet
            else
              echo "ERROR: No iPhone simulators available"
              exit 1
            fi
          }
          
          echo "✅ iOS build completed successfully"

  # PARKED - Web build job disabled while Leptos web app development is paused
  # web:
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   if: needs.changes.outputs.web == 'true' || github.event_name == 'workflow_dispatch'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Rust
  #       uses: ./.github/actions/setup-rust
  #
  #     - name: Setup cargo tools
  #       uses: ./.github/actions/setup-cargo-tools
  #       with:
  #         tools: 'trunk'
  #
  #     - name: Cache build
  #       uses: ./.github/actions/cache-cargo-build
  #       with:
  #         cache-key: 'web-${{ runner.os }}'
  #
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         cache: "npm"
  #         cache-dependency-path: "web-leptos/package-lock.json"
  #
  #     - name: Install npm dependencies
  #       run: |
  #         cd web-leptos
  #         npm ci
  #
  #     - name: Build WASM target
  #       run: cargo build --target wasm32-unknown-unknown -p shared
  #
  #     - name: Build web app
  #       run: |
  #         cd web-leptos
  #         trunk build --release
  #
  #     - name: Upload web dist
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: web-dist
  #         path: web-leptos/dist/
  #         retention-days: 1

  # PARKED - Deploy web job disabled while Leptos web app development is paused
  # deploy-web:
  #   runs-on: ubuntu-latest
  #   needs: [changes, web]
  #   if: >
  #     github.event_name == 'push' &&
  #     needs.changes.outputs.web == 'true'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Download web dist
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: web-dist
  #         path: ./dist
  #
  #     - name: Deploy to Vercel (Production)
  #       if: github.ref == 'refs/heads/main'
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.ORG_ID }}
  #         vercel-project-id: ${{ secrets.PROJECT_ID }}
  #         vercel-args: --prod
  #         working-directory: ./dist
  #         github-comment: false
  #         github-deployment: false
  #
  #     - name: Deploy to Vercel (Preview)
  #       if: github.ref != 'refs/heads/main'
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.ORG_ID }}
  #         vercel-project-id: ${{ secrets.PROJECT_ID }}
  #         working-directory: ./dist
  #         github-comment: false
  #         github-deployment: false

  # Deploy server to Fly.io
  deploy-server:
    runs-on: ubuntu-latest
    needs: [changes, check-previous]
    # TESTING: Force deployment on fix-server-deploy-2 branch, otherwise use normal conditions
    # Original restriction was: only main branch + specific conditions
    if: >
      github.event_name == 'push' && (
        github.ref == 'refs/heads/fix-server-deploy-2' ||
        needs.changes.outputs.rust == 'true'
      )
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Cache build
        uses: ./.github/actions/cache-cargo-build
        with:
          cache-key: 'deploy-${{ runner.os }}'

      - name: Build release server binary
        run: |
          echo "=== Building server binary for deployment ==="
          cargo build --release --bin server
          echo "=== Server binary built successfully ==="
          ls -la target/release/server
          file target/release/server

      - name: Copy binary to server directory for Docker context
        run: |
          echo "=== Copying binary to server directory ==="
          cp target/release/server ./server/server
          chmod +x ./server/server
          echo "✅ Binary copied and made executable"
          ls -la ./server/server

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: |
          cd server
          echo "🚀 TESTING: Deploying from branch: ${{ github.ref_name }}"
          flyctl deploy --remote-only --dockerfile ./Dockerfile.optimized --config ./fly.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}