name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

# Prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Determine what changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      ios: ${{ steps.changes.outputs.ios }}
      # web: ${{ steps.changes.outputs.web }} # PARKED
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - 'shared/**'
              - 'server/**'
              - 'shared_types/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'rust-toolchain.toml'
            ios:
              - 'iOS/**'
              - 'shared/**'
              - 'shared_types/**'
            # web: # PARKED - Leptos web app development paused
            #   - 'web-leptos/**'
            #   - 'shared/**'
            #   - 'shared_types/**'

  # Core Rust testing - runs on all commits
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Setup cargo tools
        uses: ./.github/actions/setup-cargo-tools
        with:
          tools: 'nextest'

      - name: Cache build
        uses: ./.github/actions/cache-cargo-build
        with:
          cache-key: 'test-${{ runner.os }}'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Build workspace
        run: cargo build --workspace

      - name: Run tests
        run: cargo nextest run --workspace

      - name: Build release server binary
        run: cargo build --release --bin server

      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-binary
          path: target/release/server
          retention-days: 1

  # iOS build - only when iOS code changes
  ios:
    runs-on: macos-15
    needs: changes
    if: needs.changes.outputs.ios == 'true' || github.event_name == 'workflow_dispatch'
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.0.app/Contents/Developer
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.0.app/Contents/Developer

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'aarch64-apple-ios-sim,x86_64-apple-ios'

      - name: Setup cargo tools
        uses: ./.github/actions/setup-cargo-tools
        with:
          tools: 'cargo-swift'

      - name: Cache build
        uses: ./.github/actions/cache-cargo-build
        with:
          cache-key: 'ios-${{ runner.os }}'
          additional-paths: |
            ~/Library/Caches/org.swift.swiftpm
            iOS/.build

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew/Library/Taps
          key: brew-${{ runner.os }}-xcodegen
          restore-keys: brew-${{ runner.os }}-

      - name: Install xcodegen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            brew install xcodegen
          fi

      - name: Build iOS targets
        run: |
          cargo build --lib --target aarch64-apple-ios-sim
          cargo build --lib --target x86_64-apple-ios

      - name: Build shared crate for typegen
        run: cargo build -p shared --features cli

      - name: Build shared_types
        run: cargo build -p shared_types

      - name: Generate Swift bindings
        run: ./typegen.sh

      - name: Generate Xcode project
        run: |
          cd iOS
          xcodegen generate

      - name: Install iOS 18.0 runtime (if needed)
        run: |
          # Try to install iOS 18.0 runtime, but don't fail if it's not available
          if ! xcrun simctl list runtimes | grep -q "iOS 18.0"; then
            echo "iOS 18.0 runtime not found, attempting to install..."
            # This may not work on all CI runners, so we'll continue with available runtimes
            sudo xcodebuild -downloadPlatform iOS -quiet || echo "Failed to download iOS 18.0, continuing with available runtimes"
          else
            echo "iOS 18.0 runtime already available"
          fi

      - name: List available simulators
        run: xcrun simctl list devices available

      - name: Build iOS app
        run: |
          cd iOS
          # Try multiple destination strategies prioritizing iOS 17 compatibility
          echo "Attempting iOS simulator build with iOS 17 compatible simulators..."
          
          # Strategy 1: Try with iPhone 15 on iOS 17
          if xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
            -dry-run \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO &>/dev/null; then
            
            echo "Using iPhone 15 with iOS 17.0"
            xcodebuild \
              -project Intrada.xcodeproj \
              -scheme Intrada \
              -configuration Debug \
              -sdk iphonesimulator \
              -destination 'platform=iOS Simulator,name=iPhone 15,OS=17.0' \
              clean build \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
              
          # Strategy 2: Try with iPhone 15 (any available iOS version)
          elif xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -dry-run \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO &>/dev/null; then
            
            echo "Using iPhone 15 simulator"
            xcodebuild \
              -project Intrada.xcodeproj \
              -scheme Intrada \
              -configuration Debug \
              -sdk iphonesimulator \
              -destination 'platform=iOS Simulator,name=iPhone 15' \
              clean build \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
              
          # Strategy 3: Try with iPhone 14
          elif xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 14' \
            -dry-run \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO &>/dev/null; then
            
            echo "Using iPhone 14 simulator"
            xcodebuild \
              -project Intrada.xcodeproj \
              -scheme Intrada \
              -configuration Debug \
              -sdk iphonesimulator \
              -destination 'platform=iOS Simulator,name=iPhone 14' \
              clean build \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
              
          # Strategy 4: Find any iOS 17 compatible simulator
          else
            echo "Finding any available iOS 17+ compatible iPhone simulator..."
            # Look for iOS 17 simulators first
            SIMULATOR_LINE=$(xcrun simctl list devices available | grep "iPhone" | grep -E "(17\.|18\.)" | head -1)
            if [ ! -z "$SIMULATOR_LINE" ]; then
              SIMULATOR_ID=$(echo "$SIMULATOR_LINE" | sed -n 's/.*(\([A-F0-9-]*\)).*/\1/p')
              echo "Using iOS 17+ simulator ID: $SIMULATOR_ID"
              xcodebuild \
                -project Intrada.xcodeproj \
                -scheme Intrada \
                -configuration Debug \
                -sdk iphonesimulator \
                -destination "id=$SIMULATOR_ID" \
                clean build \
                CODE_SIGNING_REQUIRED=NO \
                CODE_SIGNING_ALLOWED=NO
            else
              # Fallback to any iPhone simulator
              echo "No iOS 17+ simulators found, trying any iPhone simulator..."
              SIMULATOR_ID=$(xcrun simctl list devices available | grep "iPhone" | head -1 | sed -n 's/.*(\([A-F0-9-]*\)).*/\1/p')
              if [ ! -z "$SIMULATOR_ID" ]; then
                echo "Using fallback simulator ID: $SIMULATOR_ID"
                xcodebuild \
                  -project Intrada.xcodeproj \
                  -scheme Intrada \
                  -configuration Debug \
                  -sdk iphonesimulator \
                  -destination "id=$SIMULATOR_ID" \
                  clean build \
                  CODE_SIGNING_REQUIRED=NO \
                  CODE_SIGNING_ALLOWED=NO
              else
                echo "ERROR: No iPhone simulators available"
                exit 1
              fi
            fi
          fi

  # PARKED - Web build job disabled while Leptos web app development is paused
  # web:
  #   runs-on: ubuntu-latest
  #   needs: changes
  #   if: needs.changes.outputs.web == 'true' || github.event_name == 'workflow_dispatch'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Rust
  #       uses: ./.github/actions/setup-rust
  #
  #     - name: Setup cargo tools
  #       uses: ./.github/actions/setup-cargo-tools
  #       with:
  #         tools: 'trunk'
  #
  #     - name: Cache build
  #       uses: ./.github/actions/cache-cargo-build
  #       with:
  #         cache-key: 'web-${{ runner.os }}'
  #
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         cache: "npm"
  #         cache-dependency-path: "web-leptos/package-lock.json"
  #
  #     - name: Install npm dependencies
  #       run: |
  #         cd web-leptos
  #         npm ci
  #
  #     - name: Build WASM target
  #       run: cargo build --target wasm32-unknown-unknown -p shared
  #
  #     - name: Build web app
  #       run: |
  #         cd web-leptos
  #         trunk build --release
  #
  #     - name: Upload web dist
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: web-dist
  #         path: web-leptos/dist/
  #         retention-days: 1

  # PARKED - Deploy web job disabled while Leptos web app development is paused
  # deploy-web:
  #   runs-on: ubuntu-latest
  #   needs: [changes, web]
  #   if: >
  #     github.event_name == 'push' &&
  #     needs.changes.outputs.web == 'true'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Download web dist
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: web-dist
  #         path: ./dist
  #
  #     - name: Deploy to Vercel (Production)
  #       if: github.ref == 'refs/heads/main'
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.ORG_ID }}
  #         vercel-project-id: ${{ secrets.PROJECT_ID }}
  #         vercel-args: --prod
  #         working-directory: ./dist
  #         github-comment: false
  #         github-deployment: false
  #
  #     - name: Deploy to Vercel (Preview)
  #       if: github.ref != 'refs/heads/main'
  #       uses: amondnet/vercel-action@v25
  #       with:
  #         vercel-token: ${{ secrets.VERCEL_TOKEN }}
  #         vercel-org-id: ${{ secrets.ORG_ID }}
  #         vercel-project-id: ${{ secrets.PROJECT_ID }}
  #         working-directory: ./dist
  #         github-comment: false
  #         github-deployment: false

  # Deploy server to Fly.io
  deploy-server:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: >
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      needs.changes.outputs.rust == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download server binary
        uses: actions/download-artifact@v4
        with:
          name: server-binary
          path: ./

      - name: Copy binary to server directory for Docker context
        run: |
          cp server ./server/
          chmod +x ./server/server

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: |
          cd server
          flyctl deploy --remote-only --dockerfile ./Dockerfile.optimized --config ./fly.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}