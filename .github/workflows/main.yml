name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

# Prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Determine what changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      ios: ${{ steps.changes.outputs.ios }}
      web: ${{ steps.changes.outputs.web }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - 'shared/**'
              - 'server/**'
              - 'shared_types/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'rust-toolchain.toml'
            ios:
              - 'iOS/**'
              - 'shared/**'
              - 'shared_types/**'
            web:
              - 'web-leptos/**'
              - 'shared/**'
              - 'shared_types/**'

  # Core Rust testing - runs on all commits
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Setup cargo tools
        uses: ./.github/actions/setup-cargo-tools
        with:
          tools: 'nextest'

      - name: Cache build
        uses: ./.github/actions/cache-cargo-build
        with:
          cache-key: 'test-${{ runner.os }}'

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Build workspace
        run: cargo build --workspace

      - name: Run tests
        run: cargo nextest run --workspace

      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-binary
          path: target/debug/intrada-server
          retention-days: 1

  # iOS build - only when iOS code changes
  ios:
    runs-on: macos-15
    needs: changes
    if: needs.changes.outputs.ios == 'true' || github.event_name == 'workflow_dispatch'
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.0.app/Contents/Developer
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'aarch64-apple-ios-sim,x86_64-apple-ios'

      - name: Setup cargo tools
        uses: ./.github/actions/setup-cargo-tools
        with:
          tools: 'cargo-swift'

      - name: Cache build
        uses: ./.github/actions/cache-cargo-build
        with:
          cache-key: 'ios-${{ runner.os }}'
          additional-paths: |
            ~/Library/Caches/org.swift.swiftpm
            iOS/.build

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew/Library/Taps
          key: brew-${{ runner.os }}-xcodegen
          restore-keys: brew-${{ runner.os }}-

      - name: Install xcodegen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            brew install xcodegen
          fi

      - name: Build iOS targets
        run: |
          cargo build --lib --target aarch64-apple-ios-sim
          cargo build --lib --target x86_64-apple-ios

      - name: Build shared crate for typegen
        run: cargo build -p shared --features cli

      - name: Build shared_types
        run: cargo build -p shared_types

      - name: Generate Swift bindings
        run: ./typegen.sh

      - name: Generate Xcode project
        run: |
          cd iOS
          xcodegen generate

      - name: Build iOS app
        run: |
          cd iOS
          xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            clean build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

  # Web build - only when web code changes
  web:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust

      - name: Setup cargo tools
        uses: ./.github/actions/setup-cargo-tools
        with:
          tools: 'trunk'

      - name: Cache build
        uses: ./.github/actions/cache-cargo-build
        with:
          cache-key: 'web-${{ runner.os }}'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "web-leptos/package-lock.json"

      - name: Install npm dependencies
        run: |
          cd web-leptos
          npm ci

      - name: Build WASM target
        run: cargo build --target wasm32-unknown-unknown -p shared

      - name: Build web app
        run: |
          cd web-leptos
          trunk build --release

      - name: Upload web dist
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: web-leptos/dist/
          retention-days: 1

  # Deploy web to Vercel
  deploy-web:
    runs-on: ubuntu-latest
    needs: [changes, web]
    if: >
      github.event_name == 'push' &&
      needs.changes.outputs.web == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download web dist
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: ./dist

      - name: Deploy to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: --prod
          working-directory: ./dist
          github-comment: false
          github-deployment: false

      - name: Deploy to Vercel (Preview)
        if: github.ref != 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./dist
          github-comment: false
          github-deployment: false

  # Deploy server to Fly.io
  deploy-server:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: >
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      needs.changes.outputs.rust == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: |
          flyctl deploy --remote-only --dockerfile ./server/Dockerfile --config ./server/fly.toml
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}