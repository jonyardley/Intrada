name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

# Prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job to determine what changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      ios: ${{ steps.changes.outputs.ios }}
      web: ${{ steps.changes.outputs.web }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - 'shared/**'
              - 'server/**'
              - 'shared_types/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'rust-toolchain.toml'
            ios:
              - 'iOS/**'
              - 'shared/**'
              - 'shared_types/**'
              - '.github/workflows/main.yml'
            web:
              - 'web-leptos/**'
              - 'shared/**'
              - 'shared_types/**'
              - '.github/workflows/main.yml'

  # Unified build job - compiles once for all targets
  unified-build:
    runs-on: ubuntu-latest
    needs: changes
    if: >
      needs.changes.outputs.rust == 'true' ||
      needs.changes.outputs.web == 'true' ||
      needs.changes.outputs.ios == 'true' ||
      github.event_name == 'workflow_dispatch'
    outputs:
      cache-key: ${{ steps.cache-info.outputs.cache-key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'wasm32-unknown-unknown'

      - name: Generate cache key
        id: cache-info
        run: |
          echo "cache-key=${{ runner.os }}-unified-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache cargo dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.cache-info.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-unified-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-unified-

      - name: Check formatting
        run: |
          echo "::group::Checking Rust formatting"
          cargo fmt --all -- --check
          echo "::endgroup::"

      - name: Cache cargo tools
        uses: actions/cache@v4
        id: cache-cargo-tools
        with:
          path: ~/.cargo/bin
          key: cargo-tools-${{ runner.os }}-clippy-nextest-v1
          restore-keys: |
            cargo-tools-${{ runner.os }}-

      - name: Install cargo-nextest
        if: steps.cache-cargo-tools.outputs.cache-hit != 'true'
        uses: taiki-e/install-action@cargo-nextest

      - name: Run clippy
        run: |
          echo "::group::Running clippy lints"
          cargo clippy --all-targets --all-features -- -D warnings
          echo "::endgroup::"

      - name: Build all targets in parallel
        run: |
          echo "::group::Building all targets"
          # Build native targets (for server and tests)
          cargo build --release --workspace &
          # Build WASM target (for web)
          cargo build --release --target wasm32-unknown-unknown -p shared &
          # Wait for both builds to complete
          wait
          echo "::endgroup::"

      - name: Run tests (parallel)
        run: |
          echo "::group::Running tests with nextest"
          # Run tests on all packages - tests must pass for CI to succeed
          cargo nextest run -p shared
          cargo nextest run -p intrada-server
          cargo nextest run -p web-leptos
          # Note: shared_types tests are skipped due to circular dependency with shared crate
          echo "Tests complete - all packages tested"
          echo "::endgroup::"

      - name: Validate build artifacts
        run: |
          echo "::group::Validating build artifacts"
          # Check server binary exists and is executable
          if [ ! -f "target/release/intrada-server" ]; then
            echo "::error::Server binary not found at target/release/intrada-server"
            exit 1
          fi
          
          # Check if server binary is executable
          if [ ! -x "target/release/intrada-server" ]; then
            echo "::error::Server binary is not executable"
            exit 1
          fi
          
          # Check WASM artifacts exist
          if [ ! -d "target/wasm32-unknown-unknown/release/" ]; then
            echo "::error::WASM build artifacts not found"
            exit 1
          fi
          
          # Check for libshared WASM files
          if [ ! -f "target/wasm32-unknown-unknown/release/libshared.a" ]; then
            echo "::error::WASM static library not found"
            exit 1
          fi
          
          echo "All build artifacts validated successfully"
          echo "::endgroup::"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            target/release/intrada-server
            target/wasm32-unknown-unknown/release/
            target/release/build/
            target/release/deps/
          retention-days: 1

  # iOS build job - uses pre-built artifacts where possible
  ios-build:
    runs-on: macos-15
    needs: [changes, unified-build]
    if: (needs.changes.outputs.ios == 'true') || github.event_name == 'workflow_dispatch'
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.0.app/Contents/Developer
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'aarch64-apple-ios-sim,x86_64-apple-ios'

      - name: Cache iOS-specific build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-ios-${{ hashFiles('**/Cargo.lock') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ios-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-ios-

      - name: Cache cargo tools
        uses: actions/cache@v4
        id: cache-cargo-tools
        with:
          path: ~/.cargo/bin
          key: cargo-tools-${{ runner.os }}-v2

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/org.swift.swiftpm
            iOS/.build
          key: spm-${{ hashFiles('iOS/Package.swift', 'iOS/Package.resolved') }}
          restore-keys: |
            spm-

      - name: Cache Homebrew
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew/Library/Taps
          key: brew-${{ runner.os }}-xcodegen
          restore-keys: |
            brew-${{ runner.os }}-

      - name: Install cargo-swift (if needed)
        if: steps.cache-cargo-tools.outputs.cache-hit != 'true'
        run: |
          if ! command -v cargo-swift &> /dev/null; then
            cargo install cargo-swift --locked
          fi

      - name: Build iOS-specific targets only
        run: |
          echo "::group::Building iOS targets"
          # Only build what's needed for iOS that wasn't built in unified-build
          cargo build --lib --target aarch64-apple-ios-sim --release
          cargo build --lib --target x86_64-apple-ios --release
          echo "::endgroup::"

      - name: Build Crux Core (Shared)
        run: |
          echo "::group::Building shared crate in debug mode for crux_cli"
          cargo build -p shared --features cli
          echo "::endgroup::"

      - name: Build shared_types to generate Swift bindings
        run: |
          echo "::group::Building shared_types package"
          cargo build -p shared_types
          echo "::endgroup::"

      - name: Generate Swift bindings
        run: |
          echo "::group::Generating Swift bindings"
          ./typegen.sh
          echo "::endgroup::"

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: xcode-deriveddata-${{ hashFiles('iOS/**/*.swift', 'iOS/**/*.plist', 'iOS/**/*.xcconfig') }}
          restore-keys: |
            xcode-deriveddata-

      - name: Install xcodegen
        run: |
          if ! command -v xcodegen &> /dev/null; then
            brew install xcodegen
          fi

      - name: Generate Xcode project
        run: |
          cd iOS
          xcodegen generate

      - name: Build iOS app
        run: |
          cd iOS
          xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            clean build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Test iOS app
        run: |
          cd iOS
          # Check if tests exist before running
          if xcodebuild -project Intrada.xcodeproj -scheme Intrada -showBuildSettings | grep -q "TEST_"; then
            xcodebuild test \
              -project Intrada.xcodeproj \
              -scheme Intrada \
              -configuration Debug \
              -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
              CODE_SIGNING_REQUIRED=NO \
              CODE_SIGNING_ALLOWED=NO
          else
            echo "No tests found in iOS project - skipping test execution"
          fi

  # Web build job - uses pre-built WASM artifacts
  web-build:
    runs-on: ubuntu-latest
    needs: [changes, unified-build]
    if: (needs.changes.outputs.web == 'true') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: target/

      - name: Setup Rust (minimal for trunk)
        uses: ./.github/actions/setup-rust
        with:
          targets: 'wasm32-unknown-unknown'

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ needs.unified-build.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-unified-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-unified-

      - name: Cache trunk
        uses: actions/cache@v4
        id: cache-trunk
        with:
          path: |
            ~/.cargo/bin/trunk
          key: trunk-${{ runner.os }}-v2

      - name: Install Trunk
        if: steps.cache-trunk.outputs.cache-hit != 'true'
        run: cargo install trunk --locked

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "web-leptos/package-lock.json"

      - name: Install npm dependencies
        run: |
          cd web-leptos
          npm ci

      - name: Build web app (using pre-built WASM)
        run: |
          cd web-leptos
          trunk build --release

      - name: Upload web dist
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: web-leptos/dist/
          retention-days: 1

  # Deploy web application to Vercel
  deploy-web:
    runs-on: ubuntu-latest
    needs: [changes, web-build]
    if: >
      github.event_name == 'push' &&
      needs.changes.outputs.web == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download web dist
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: ./dist

      - name: Deploy web to Vercel (Production)
        if: github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: --prod
          working-directory: ./dist
          github-comment: false
          github-deployment: false

      - name: Deploy web to Vercel (Preview)
        if: github.ref != 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: ./dist
          github-comment: false
          github-deployment: false

  # Deploy server application to Fly.io
  deploy-server:
    runs-on: ubuntu-latest
    needs: [changes, unified-build]
    if: >
      github.ref == 'refs/heads/main' &&
      github.event_name == 'push' &&
      needs.changes.outputs.rust == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        run: |
          cd server
          flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}