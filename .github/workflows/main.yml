name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

# Prevent concurrent runs on the same branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Job to determine what changed
  changes:
    runs-on: ubuntu-latest
    outputs:
      rust: ${{ steps.changes.outputs.rust }}
      ios: ${{ steps.changes.outputs.ios }}
      web: ${{ steps.changes.outputs.web }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            rust:
              - 'shared/**'
              - 'server/**'
              - 'shared_types/**'
              - 'Cargo.toml'
              - 'Cargo.lock'
              - 'rust-toolchain.toml'
            ios:
              - 'iOS/**'
              - 'shared/**'
              - 'shared_types/**'
              - '.github/workflows/main.yml'
            web:
              - 'web-leptos/**'
              - 'shared/**'
              - 'shared_types/**'
              - '.github/workflows/main.yml'

  # Quality checks (formatting and linting)
  quality-check:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.rust == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'wasm32-unknown-unknown'

      - name: Check formatting
        run: |
          echo "::group::Checking Rust formatting"
          cargo fmt --all -- --check
          echo "::endgroup::"

      - name: Run clippy
        run: |
          echo "::group::Running clippy lints"
          cargo clippy --all-targets --all-features -- -D warnings
          echo "::endgroup::"

  # Build and test Rust components
  rust-build:
    runs-on: ubuntu-latest
    needs: [changes, quality-check]
    if: needs.changes.outputs.rust == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'wasm32-unknown-unknown'

      - name: Build shared library
        run: |
          cd shared
          cargo build --lib --release
          cargo build --lib --release --target wasm32-unknown-unknown

      - name: Build shared_types
        run: |
          cd shared_types
          cargo build --release

      - name: Build server
        run: |
          cd server
          cargo build --release

      - name: Test shared
        run: |
          cd shared
          cargo test

      - name: Test server
        run: |
          cd server
          cargo test

      - name: Upload server binary
        uses: actions/upload-artifact@v4
        with:
          name: server-binary
          path: server/target/release/server
          retention-days: 1

  # Build web application
  web-build:
    runs-on: ubuntu-latest
    needs: [changes, quality-check, rust-build]
    if: needs.changes.outputs.web == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'wasm32-unknown-unknown'

      - name: Cache trunk
        uses: actions/cache@v4
        id: cache-trunk
        with:
          path: |
            ~/.cargo/bin/trunk
          key: trunk-${{ runner.os }}-v1

      - name: Install Trunk
        if: steps.cache-trunk.outputs.cache-hit != 'true'
        run: cargo install trunk

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "web-leptos/package-lock.json"

      - name: Install npm dependencies
        run: |
          cd web-leptos
          npm ci

      - name: Build web app
        run: |
          cd web-leptos
          trunk build --release

      - name: Upload web dist
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: web-leptos/dist/
          retention-days: 1

  # Build iOS application
  ios-build:
    runs-on: macos-15
    needs: [changes, quality-check, rust-build]
    if: needs.changes.outputs.ios == 'true' || github.event_name == 'workflow_dispatch'
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.0.app/Contents/Developer
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          targets: 'aarch64-apple-ios-sim,x86_64-apple-ios'

      - name: Cache cargo tools
        uses: actions/cache@v4
        id: cache-cargo-tools
        with:
          path: ~/.cargo/bin
          key: cargo-tools-${{ runner.os }}-v1

      - name: Install cargo-swift (if needed)
        if: steps.cache-cargo-tools.outputs.cache-hit != 'true'
        run: |
          if ! command -v cargo-swift &> /dev/null; then
            cargo install cargo-swift
          fi

      - name: Build shared library for iOS
        run: |
          cd shared
          cargo build --lib

      - name: Generate Swift types and bindings
        run: ./typegen.sh

      - name: Cache Xcode DerivedData
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: xcode-deriveddata-${{ hashFiles('iOS/**/*.swift', 'iOS/**/*.plist') }}
          restore-keys: |
            xcode-deriveddata-

      - name: Generate Xcode project
        run: |
          cd iOS
          if ! command -v xcodegen &> /dev/null; then
            brew install xcodegen
          fi
          xcodegen generate

      - name: Build iOS app
        run: |
          cd iOS
          xcodebuild \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            clean build \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

      - name: Test iOS app
        run: |
          cd iOS
          xcodebuild test \
            -project Intrada.xcodeproj \
            -scheme Intrada \
            -configuration Debug \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=latest' \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            || echo "No tests found or tests failed - continuing"

  # Deploy to production (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [rust-build, web-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download web dist
        uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: web-leptos/dist/

      - name: Download server binary
        uses: actions/download-artifact@v4
        with:
          name: server-binary
          path: server/target/release/

      - name: Deploy web to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: --prod
          working-directory: web-leptos/dist

      # TODO: Add server deployment to Fly.io when ready
      # - name: Deploy server to Fly.io
      #   run: |
      #     # Install flyctl and deploy
      #     curl -L https://fly.io/install.sh | sh
      #     cd server
      #     ~/.fly/bin/fly deploy 