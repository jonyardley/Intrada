name: Test Crux Setup

# This workflow tests that our Crux dependency setup works correctly
# It can be run manually to verify the setup or automatically as part of CI

on:
  workflow_dispatch:
    inputs:
      crux_repo:
        description: 'Crux repository to use'
        required: false
        default: 'redbadger/crux'
        type: string
      crux_ref:
        description: 'Crux branch/tag/commit to use'
        required: false
        default: 'main'
        type: string
  # Run automatically on changes to Crux setup
  push:
    paths:
      - 'scripts/setup-crux.sh'
      - '.github/scripts/detect-environment.sh'
      - 'Cargo.toml'
      - 'shared/Cargo.toml'
  pull_request:
    paths:
      - 'scripts/setup-crux.sh'
      - '.github/scripts/detect-environment.sh'
      - 'Cargo.toml'
      - 'shared/Cargo.toml'

jobs:
  test-crux-setup:
    name: Test Crux Setup
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        crux_ref: ['main']
        # Add more refs to test if needed:
        # crux_ref: ['main', 'develop', 'v0.16.0']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Crux dependency
      run: |
        ./scripts/setup-crux.sh
      env:
        CI: true
        CRUX_REPO: ${{ github.event.inputs.crux_repo || 'redbadger/crux' }}
        CRUX_REF: ${{ github.event.inputs.crux_ref || matrix.crux_ref }}
        CRUX_PATH: "../crux"
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-crux-test-${{ hashFiles('**/Cargo.lock') }}-v2
        restore-keys: |
          ${{ runner.os }}-cargo-crux-test-v2
          
    - name: Verify Crux setup
      run: |
        echo "🔍 Verifying Crux is properly set up..."
        
        # Check Crux directory exists
        if [[ ! -d "../crux" ]]; then
          echo "❌ Crux directory not found"
          exit 1
        fi
        
        # Check core files exist
        if [[ ! -f "../crux/Cargo.toml" ]]; then
          echo "❌ Crux workspace Cargo.toml not found"
          exit 1
        fi
        
        if [[ ! -f "../crux/crux_core/Cargo.toml" ]]; then
          echo "❌ crux_core crate not found"
          exit 1
        fi
        
        if [[ ! -f "../crux/crux_http/Cargo.toml" ]]; then
          echo "❌ crux_http crate not found"
          exit 1
        fi
        
        echo "✅ Crux verification passed!"
        
        # Show Crux info
        echo "📋 Crux Information:"
        echo "  Path: ../crux"
        
        cd ../crux
        echo "  Git commit: $(git rev-parse --short HEAD)"
        echo "  Git branch: $(git branch --show-current)"
        
        # Show crux_core version
        CRUX_VERSION=$(grep '^version' crux_core/Cargo.toml | cut -d'"' -f2)
        echo "  crux_core version: $CRUX_VERSION"
        
    - name: Test workspace compilation
      run: |
        echo "🔨 Testing workspace compilation with Crux..."
        cargo check --workspace
        echo "✅ Workspace compiles successfully with Crux!"
        
    - name: Test shared library compilation
      run: |
        echo "🦀 Testing shared library compilation..."
        cd shared
        cargo check --lib
        echo "✅ Shared library compiles successfully!"
        
    - name: Test infrastructure compilation
      run: |
        echo "🏗️ Testing infrastructure compilation..."
        cd infrastructure
        cargo check --features cli
        echo "✅ Infrastructure compiles successfully!"
        
    - name: Test dependency resolution
      run: |
        echo "🔍 Testing dependency resolution..."
        cargo tree | grep crux || echo "No crux dependencies found in tree"
        
        echo "📋 Crux dependencies in workspace:"
        grep -r "crux" Cargo.toml shared/Cargo.toml || echo "No crux references found"
        
        echo "✅ Dependency resolution test completed!"
        
    - name: Generate performance metrics
      run: |
        echo "⏱️ Measuring setup performance..."
        
        START_TIME=$(date +%s)
        ./scripts/setup-crux.sh
        END_TIME=$(date +%s)
        SETUP_TIME=$((END_TIME - START_TIME))
        
        echo "Setup time: ${SETUP_TIME}s"
        echo "SETUP_TIME=${SETUP_TIME}" >> $GITHUB_ENV
        
    - name: Generate summary
      run: |
        echo "# 🦀 Crux Setup Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.event.inputs.crux_repo || 'redbadger/crux' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Reference**: ${{ github.event.inputs.crux_ref || matrix.crux_ref }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Path**: ../crux" >> $GITHUB_STEP_SUMMARY
        echo "- **Setup Time**: ${SETUP_TIME}s" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Crux setup successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Workspace compilation successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Shared library compilation successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Infrastructure compilation successful" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ All dependencies resolved" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Crux Information" >> $GITHUB_STEP_SUMMARY
        
        cd ../crux
        echo "- **Git Commit**: $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Branch**: $(git branch --show-current)" >> $GITHUB_STEP_SUMMARY
        CRUX_VERSION=$(grep '^version' crux_core/Cargo.toml | cut -d'"' -f2)
        echo "- **Version**: $CRUX_VERSION" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "Your CI/CD workflows are ready to use the local Crux dependency!" >> $GITHUB_STEP_SUMMARY