name: Build, Test & Deploy to Vercel

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  VERCEL_ORG_ID: ${{ secrets.ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Rust toolchain caching
      - name: Cache Rust toolchain
        id: cache-rust-toolchain
        uses: actions/cache@v3
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-rust-toolchain-${{ hashFiles('rust-toolchain.toml', 'Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-toolchain-

      - name: Set up Rust
        if: steps.cache-rust-toolchain.outputs.cache-hit != 'true'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup install stable
          rustup default stable
          rustup component add rustfmt clippy

      # Cache cargo-nextest
      - name: Cache cargo-nextest installation
        uses: actions/cache@v3
        id: cache-cargo-nextest
        with:
          path: ~/.cargo/bin/cargo-nextest
          key: ${{ runner.os }}-cargo-nextest-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-nextest
        if: steps.cache-cargo-nextest.outputs.cache-hit != 'true'
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-nextest
          args: --locked

      # Cargo registry and index cache
      - name: Cache cargo registry and index
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Cache build artifacts with more precise keys
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: |
            target
            web-leptos/target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}-
            ${{ runner.os }}-cargo-build-

      # Cache trunk installation
      - name: Cache trunk installation
        id: cache-trunk
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/trunk
          key: ${{ runner.os }}-cargo-bin-trunk-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Trunk
        if: steps.cache-trunk.outputs.cache-hit != 'true'
        run: cargo install trunk --force

      - name: Verify Trunk installation
        run: trunk --version

      # Node.js and NPM caching
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "web-leptos/package-lock.json"

      - name: Install NPM dependencies
        run: npm ci
        working-directory: ./web-leptos

      # Cache CSS output
      - name: Cache CSS build
        id: cache-css
        uses: actions/cache@v3
        with:
          path: web-leptos/style/output.css
          key: ${{ runner.os }}-css-${{ hashFiles('web-leptos/style/input.css', 'web-leptos/tailwind.config.js', 'web-leptos/postcss.config.js') }}

      # Ensure style directory exists
      - name: Ensure style directory exists
        run: mkdir -p style
        working-directory: ./web-leptos

      # Generate CSS if not cached
      - name: Build CSS if needed
        run: npx tailwindcss -i ./style/input.css -o ./style/output.css
        working-directory: ./web-leptos

      # Verify CSS exists
      - name: Verify CSS was created
        run: |
          if [ ! -f ./style/output.css ]; then
            echo "::error::output.css was not created"
            exit 1
          fi
          echo "CSS file exists and has size $(stat -f%z ./style/output.css) bytes"
        working-directory: ./web-leptos

      # Build with Trunk
      - name: Build with Trunk
        run: |
          # Make sure we're in the correct directory
          cd $(pwd)
          echo "Current directory: $(pwd)"

          # Run build all script with error handling
          npm run build:all || {
            echo "::error::Build failed, trying direct commands..."
            npx tailwindcss -i ./style/input.css -o ./style/output.css
            trunk build --release
          }
        working-directory: ./web-leptos

      - name: Verify dist directory
        run: ls -la ./web-leptos/dist

      # Run tests
      - name: Run Shared tests
        run: cargo nextest run --release -p shared

      # Upload build artifact
      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./web-leptos/dist
          retention-days: 1

  Vercel-Production-Deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./web-leptos/dist

      # Cache Vercel CLI
      - name: Cache Vercel CLI
        uses: actions/cache@v3
        id: cache-vercel-cli
        with:
          path: |
            ~/.npm/global/lib/node_modules/vercel
            ~/.npm/global/bin/vercel
          key: ${{ runner.os }}-vercel-cli-${{ hashFiles('**/package-lock.json') }}

      - name: Install Vercel CLI
        if: steps.cache-vercel-cli.outputs.cache-hit != 'true'
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel & Display URL
        id: deployment
        working-directory: ./web-leptos/dist
        run: |
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} >> $GITHUB_STEP_SUMMARY
          echo $GITHUB_STEP_SUMMARY

  Vercel-Preview-Deployment:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: preview
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./web-leptos/dist

      # Cache Vercel CLI
      - name: Cache Vercel CLI
        uses: actions/cache@v3
        id: cache-vercel-cli
        with:
          path: |
            ~/.npm/global/lib/node_modules/vercel
            ~/.npm/global/bin/vercel
          key: ${{ runner.os }}-vercel-cli-${{ hashFiles('**/package-lock.json') }}

      - name: Install Vercel CLI
        if: steps.cache-vercel-cli.outputs.cache-hit != 'true'
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview & Display URL
        id: deployment
        working-directory: ./web-leptos/dist
        run: |
          vercel deploy --token=${{ secrets.VERCEL_TOKEN }} >> $GITHUB_STEP_SUMMARY
          echo $GITHUB_STEP_SUMMARY
