name: Appwrite Setup

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  APPWRITE_PROJECT_ID: intrada-dev
  APPWRITE_DATABASE_ID: intrada_db
  APPWRITE_DATABASE_NAME: "Intrada Database"

jobs:
  setup-appwrite:
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:24.0.5
        options: --user root
        env:
          DOCKER_BUILDKIT: 1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin
        
    - name: Start Appwrite
      run: |
        docker compose up -d
        echo "Waiting for Appwrite to start..."
        timeout 120 bash -c 'until curl -s http://localhost/v1/health > /dev/null; do sleep 2; done'
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build CLI tool
      run: |
        cd infrastructure
        cargo build --bin appwrite_cli --features cli --release
        
    - name: Create project and API key
      run: |
        # This would need to be adapted for CI environment
        # For now, we'll use environment variables
        echo "Setting up project..."
        # Note: In CI, you'd typically use a service account or pre-created API key
        # This is a placeholder for the actual implementation
        
    - name: Deploy schema
      run: |
        cd infrastructure
        ../target/release/appwrite_cli deploy \
          --database-id $APPWRITE_DATABASE_ID \
          --database-name "$APPWRITE_DATABASE_NAME" \
          --environment ci
      env:
        APPWRITE_ENDPOINT: http://localhost/v1
        APPWRITE_PROJECT: ${{ env.APPWRITE_PROJECT_ID }}
        APPWRITE_KEY: ${{ secrets.APPWRITE_API_KEY }}
        
    - name: Verify setup
      run: |
        curl -s -H "X-Appwrite-Project: ${{ env.APPWRITE_PROJECT_ID }}" \
             -H "X-Appwrite-Key: ${{ secrets.APPWRITE_API_KEY }}" \
             "http://localhost/v1/databases" | jq .
             
    - name: Run tests
      run: |
        # Add your test commands here
        echo "Running tests against Appwrite..."
        
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f 